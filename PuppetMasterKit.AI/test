using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp2.Map
{
    public class MapBuilder
    {
        public static readonly int Blank = int.MinValue;

        public int Rows { get; private set; }
        public int Cols { get; private set; }

        private int[,] map;
        private int roomPadding;
        
        public MapBuilder(int rows, int cols, int roomPadding)
        {
            this.Rows = rows;
            this.Cols = cols;
            this.roomPadding = roomPadding;
            map = new int[Rows, Cols];
            ResetMap();
        }

        private void ResetMap()
        {
            for (int i = 0; i < Rows; i++){
                for (int j = 0; j < Cols; j++){
                    map[i, j] = Blank;
                }
            }
        }
        private bool CanAdd(Module module, int row, int col)
        {
            var toAdd = module;
            if (roomPadding > 0) {
                toAdd = module.Pad(roomPadding);
            }
            for (int i = 0; i < toAdd.Rows; i++){
                for (int j = 0; j < toAdd.Cols; j++){
                    var val = toAdd[i,j];
                }
                
                if( row+r < 0 || row+r >= Rows ||
                    col+c < 0 || col+c >= Cols ||
                    map[row + r, col + c] != Blank) {
                    return false;
                }
            }
            return true;
        }

        public bool Add(Module module, int row, int col)
        {
            if(CanAdd(module, row, col)) {
                module.Stamp(map, row, col);
                return true;
            }   
            return false;
        }

        public void Apply(Action<int,int,int> action)
        {
            for (int i = 0; i < Rows; i++){
                for (int j = 0; j < Cols; j++){
                    action(i,j,map[i, j]);
                }
            }
        }
    }
}
=====================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Pair = System.Tuple<int, int>;

namespace ConsoleApp2.Map
{
    public class Module
    {
        public static int PADDING = 4;
        public static int CENTER = 3;
        public static int EXIT = 2;
        public static int X = 1;

        private int[,] pattern;
        private Pair patternCenter;
        private List<Pair> exits;

        public int Rows { get => pattern.GetLength(0); }

        public int Cols { get => pattern.GetLength(1); }

        public Module(int[,] pattern)
        {
            this.pattern = pattern;
            patternCenter = GetPatternCenter();
            if (patternCenter == null) {
                throw new ArgumentException("The pattern is missing a center point");
            }
            exits = GetExits();
        }

        private Pair GetPatternCenter() => FilterPattern(v => v == CENTER).FirstOrDefault();

        private List<Pair> GetExits() => FilterPattern(v => v == EXIT).ToList();

        private IEnumerable<Pair> FilterPattern(Func<int, bool> filter)
        {
            for (int r = 0; r < Rows; r++) {
                for (int c = 0; c < Cols; c++) {
                    if (filter(pattern[r, c])) {
                        yield return Tuple.Create(r, c);
                    }
                }
            }
        }

        private void Apply(Action<int, int, int> action)
        {
            for (int r = 0; r < Rows; r++) {
                for (int c = 0; c < Cols; c++) {
                    action(r, c, pattern[r, c]);
                }
            }
        }

        private void Set(int val, int row, int col, bool ignoreIfSet)
        {
            if (row >= 0 && row < Rows &&
                col >= 0 && col < Cols) {
                var isSet = pattern[row, col] != 0;
                if (!ignoreIfSet || !isSet) {
                    pattern[row, col] = val;
                }
            }
        }

        public void SetIfNotEmpty(int val, int row, int col) => Set(val, row, col, true);

        public void Set(int val, int row, int col) => Set(val, row, col, false);

        public int this[int row, int col]
        {
            get {
                return pattern[row, col];
            }
        }

        public Module Pad(int padding)
        {
            var newPattern = new int[Rows + 2 * padding, Cols + 2 * padding];
            Stamp(newPattern, patternCenter.Item1 + padding, patternCenter.Item2 + padding);
            var module = new Module(newPattern);
            while (padding-- > 0)
            {
                module.Apply((r, c, v) => {
                    if (v != 0 && v != PADDING) {
                        module.SetIfNotEmpty(PADDING, r - 1, c - 1);
                        module.SetIfNotEmpty(PADDING, r - 1, c);
                        module.SetIfNotEmpty(PADDING, r - 1, c + 1);
                        module.SetIfNotEmpty(PADDING, r, c - 1);
                        module.SetIfNotEmpty(PADDING, r, c + 1);
                        module.SetIfNotEmpty(PADDING, r + 1, c - 1);
                        module.SetIfNotEmpty(PADDING, r + 1, c);
                        module.SetIfNotEmpty(PADDING, r + 1, c + 1);
                    }
                });

                module.Apply((r, c, v) =>{
                    if (v == PADDING){
                        module.Set(X, r, c);
                    }
                });
            }
            return module;
        }

        public void Stamp(int[,] map, int row, int col)
        {
            var rows = map.GetLength(0);
            var cols = map.GetLength(1);
            FilterPattern(v => v != 0)
                .ToList()
                .ForEach(x => {
                    var dr = x.Item1 - patternCenter.Item1;
                    var dc = x.Item2 - patternCenter.Item2;
                    if (row + dr >= 0 && row + dr < rows && 
                        col + dc >=0 && col + dc < cols) {
                        map[row + dr, col + dc] = pattern[x.Item1, x.Item2];
                    }
                });
        }
    }
}
===========================
using ConsoleApp2.Map;
using System;
using System.Collections.Generic;
using System.Text;

namespace ConsoleApp1
{
    class Program
    {
        static int rows = 50;
        static int cols = 50;

        static void Main(string[] args)
        {
            
            var builder = new MapBuilder(rows, cols, 2);


            var module = new Module(new int[,] {
                { 0,0,1,1,1,1,1,1,0,0 },
                { 0,1,1,1,1,1,1,1,1,0 },
                { 1,1,1,1,1,1,1,1,1,1 },
                { 1,1,1,1,1,Module.CENTER,1,1,1,1 },
                { 0,0,0,1,1,1,1,1,1,1 },
                { 0,0,0,1,1,1,1,1,1,0 },
                { 0,0,0,1,1,1,1,1,1,0 },
            });

            var module2 = new Module(new int[,] {
                { 0,0,1,1,1,1,1,1,0,0 },
                { 0,1,1,1,1,1,1,1,1,0 },
                { 1,1,1,1,1,1,1,1,1,1 },
                { 1,1,1,1,1,Module.CENTER,1,1,1,1 },
                { 0,0,0,1,1,1,1,1,1,1 },
                { 0,0,0,1,1,1,1,1,1,0 },
                { 0,0,0,1,1,1,1,1,1,0 },
            });

            builder.Add(module, 10, 6);

            builder.Add(module2, 10, 15);
            PrintMap(builder);
        }

        private static void PrintMap(MapBuilder builder)
        {
            var buffer = new StringBuilder();
            var line = new StringBuilder();
            line.Append("    ");
            for (int i = 0; i < cols; i++)
            {
                line.Append((i % 10).ToString("D1"));
            }
            buffer.Append(line.ToString());
            buffer.AppendLine();
            line.Length = 0;
            line.Append("000 ");
            builder.Apply((i, j, x) =>
            {
                line.Append(x == MapBuilder.Blank ? "*" : x.ToString());
                if (j == cols - 1)
                {
                    line.AppendLine();
                    buffer.Append(line.ToString());
                    line.Length = 0;
                    line.Append((i + 1).ToString("D3") + " ");
                }
            });
            Console.WriteLine(buffer.ToString());
            Console.ReadKey();
        }
    }
}
